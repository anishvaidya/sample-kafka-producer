/*
 * This file was generated by the Gradle("init" task.
 */

plugins {
    id("java-library")
    id("java")
    id("maven-publish")
    id("org.springframework.boot") version("3.3.1")
    id("io.spring.dependency-management") version("1.1.6")
    id("org.sonarqube") version("5.1.0.4882")  // SonarQube plugin
    id("jacoco")
}
apply plugin:("io.spring.dependency-management")

repositories {
    mavenLocal()
    mavenCentral()
//    maven { url = uri("https://nexus-aws.aerohive.com/content/repositories/releases/")}
    maven { url = uri("https://repo.maven.apache.org/maven2/") }
    maven { url = uri("https://repo.spring.io/milestone") }
}

dependencies {
    api("org.springframework.boot:spring-boot-starter-web") {
        exclude group:"org.springframework.boot", module:"spring-boot-starter-tomcat"
    }
    api("org.springframework.boot:spring-boot-starter-undertow")
    modules {
        module("org.springframework.boot:spring-boot-starter-tomcat"){
            replacedBy("org.springframework.boot:spring-boot-starter-undertow")
        }
    }
    api("org.springframework.boot:spring-boot-starter-cache")
    api("org.springframework.boot:spring-boot-configuration-processor")
    api("org.projectlombok:lombok:1.18.34")
    api("org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0")
    api("com.github.joschi.jackson:jackson-datatype-threetenbp:2.6.4")
    api("com.fasterxml.jackson.core:jackson-databind:2.14.2")
    api("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.14.2")
    api("jakarta.validation:jakarta.validation-api:3.1.0")
    api("com.google.code.findbugs:jsr305:3.0.2")
    api("com.auth0:java-jwt:4.3.0")
    api("org.apache.httpcomponents.client5:httpclient5:5.3.1")

    runtimeOnly("org.springframework.boot:spring-boot-devtools")
    runtimeOnly("org.postgresql:postgresql:42.7.3")
    runtimeOnly("org.glassfish.jaxb:jaxb-runtime:4.0.5")

    compileOnly("org.projectlombok:lombok:1.18.34")
    compileOnly("io.projectreactor.netty:reactor-netty-core:1.1.24")
    compileOnly("io.projectreactor.netty:reactor-netty-http:1.1.24")

    annotationProcessor("org.projectlombok:lombok:1.18.34")
    annotationProcessor("org.mapstruct:mapstruct-processor:1.5.5.Final")


    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-starter-cache")
    implementation("org.mapstruct:mapstruct:1.5.5.Final")
    implementation("io.hypersistence:hypersistence-utils-hibernate-63:3.7.6")
    implementation("org.hibernate.orm:hibernate-jcache:6.6.3.Final")
    implementation("org.ehcache:ehcache:3.10.8")
    implementation("io.swagger:swagger-annotations:1.6.3")
    implementation("jakarta.xml.bind:jakarta.xml.bind-api:4.0.2")
    implementation("org.springframework.boot:spring-boot-starter-validation")
    implementation("org.springframework.boot:spring-boot-starter-webflux")
    implementation("org.apache.httpcomponents.client5:httpclient5:5.3.1")
    implementation("org.mapstruct:mapstruct:1.5.5.Final")
    annotationProcessor("org.mapstruct:mapstruct-processor:1.5.5.Final")
    implementation("io.swagger:swagger-annotations:1.6.3")
    implementation("jakarta.xml.bind:jakarta.xml.bind-api:4.0.2")
    implementation("org.springframework.boot:spring-boot-starter-validation")

    // https://mvnrepository.com/artifact/com.fasterxml.jackson.datatype/jackson-datatype-jsr310
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310")
    implementation 'org.apache.commons:commons-collections4:4.0'


    implementation 'io.grpc:grpc-netty-shaded:1.56.0'
    implementation 'io.grpc:grpc-protobuf:1.56.0'
    implementation 'io.grpc:grpc-stub:1.56.0'

    // kafka
    implementation("org.springframework.kafka:spring-kafka:3.3.2")

    // test
    testImplementation("com.squareup.okhttp3:mockwebserver:4.12.0")
    compileOnly("com.squareup.okhttp3:logging-interceptor:4.12.0")
    testCompileOnly("org.projectlombok:lombok:1.18.34")
    testImplementation("org.mockito:mockito-junit-jupiter:5.14.2")
    testImplementation(platform("org.junit:junit-bom:5.11.4"))
    testRuntimeOnly("org.junit.platform:junit-platform-launcher") {
        because("Only needed to run tests in a version of IntelliJ IDEA that bundles older versions")
    }
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
    testRuntimeOnly("org.junit.vintage:junit-vintage-engine")
    testAnnotationProcessor("org.projectlombok:lombok:1.18.34")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.springframework.restdocs:spring-restdocs-mockmvc:2.0.7.RELEASE")
    testImplementation("io.projectreactor:reactor-test:3.6.10")
}

configurations.configureEach {
    exclude module:("slf4j-log4j12")
    exclude module:("log4j-over-slf4j")
}

group =("com.example")
version =("0.0.1-SNAPSHOT")
description =("Kafka Publisher")

compileJava {
    options.compilerArgs = [
            "-Amapstruct.defaultComponentModel=spring"
    ]
}

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding =("UTF-8")
    options.compilerArgs = ["-parameters"]
    doFirst {
        println("Compiler args: ${options.compilerArgs}")
    }
}

tasks.withType(Javadoc).configureEach {
    options.encoding =("UTF-8")
}

tasks.withType(Test).configureEach {
    useJUnitPlatform() // Make all tests use JUnit 5
    finalizedBy jacocoTestReport // report is always generated after tests run
}

test {
    useJUnitPlatform() // Make all tests use JUnit 5
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jar {
    enabled = false
}

bootRun {
    jvmArgs([
            "-Xms3g","-Xmx3g"
    ])
}
